services:
  mongo:
    image: mongo:4.0
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db

  frontend:
    build:
      context: frontend
      dockerfile: Dockerfile.frontend
    image: tulip-frontend:latest
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.caronte.rule=Host(`NETANALYZER_DOMAIN`)"
      - "traefik.http.services.caronte.loadbalancer.server.port=80"
      - "traefik.http.services.caronte.loadbalancer.server.scheme=http"
      - "traefik.http.routers.caronte.entrypoints=web"
    ports:
      - "3000:80"
    networks:
      - proxy-internet
    depends_on:
      - mongo
      - api
    cpus: 1
    mem_limit: 1g

  api:
    build:
      context: services/api
      dockerfile: Dockerfile.api
    image: tulip-api:latest
    restart: unless-stopped
    depends_on:
      - mongo
    volumes:
      - ${TRAFFIC_DIR_HOST}:${TRAFFIC_DIR_DOCKER}:ro
      - ./services.json:${SERVICES_FILE:-/tmp/dummy}:ro
    environment:
      TULIP_MONGO: ${TULIP_MONGO}
      TULIP_TRAFFIC_DIR: ${TRAFFIC_DIR_DOCKER}
      FLAG_REGEX: ${FLAG_REGEX}
      TICK_START: ${TICK_START}
      TICK_LENGTH: ${TICK_LENGTH}
      VM_IP: ${VM_IP}
      SERVICES_FILE: ${SERVICES_FILE:-/tmp/dummy}
    cpus: 2
    mem_limit: 2g

  assembler:
    build:
      context: services/go-importer
      dockerfile: Dockerfile.assembler
    image: tulip-assembler:latest
    restart: unless-stopped
    depends_on:
      - mongo
    volumes:
      - ${TRAFFIC_DIR_HOST}:${TRAFFIC_DIR_DOCKER}:ro
    command: "./assembler -dir ${TRAFFIC_DIR_DOCKER}"
    environment:
      TULIP_MONGO: ${TULIP_MONGO}
      FLAG_REGEX: ${FLAG_REGEX}
      TICK_LENGTH: ${TICK_LENGTH}
      FLAGID_SCAN: ${FLAGID_SCAN}
      FLAG_LIFETIME: ${FLAG_LIFETIME}
      PCAP_OVER_IP: ${PCAP_OVER_IP}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    cpus: 1
    mem_limit: 1g

volumes:
  mongo-data:

networks:
  proxy-internet:
    external: true
